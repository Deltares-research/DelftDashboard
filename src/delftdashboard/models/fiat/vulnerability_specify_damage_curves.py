# -*- coding: utf-8 -*-
from pathlib import Path
from delftdashboard.app import app
from delftdashboard.operations import map
import plotly.graph_objects as go


def select(*args):
    # De-activate existing layers
    map.update()


def set_variables(*args):
    app.active_model.set_input_variables()


def filter_damage_curve_table(*args):
    # Get the selected occupancy type
    idx = app.gui.getvar("fiat", "active_exposure_category")[0]
    df = app.gui.getvar("fiat", "exposure_categories_to_link")

    occtype = "Secondary Object Type"
    if ("Primary Object Type" in df.columns) and (
        "Secondary Object Type" not in df.columns
    ):
        occtype = "Primary Object Type"
    selected_occupancy_type = df.iloc[idx][occtype]

    # Filter the damage function table
    df = app.active_model.get_filtered_damage_function_database(selected_occupancy_type)
    default_index = df.index[0]
    app.gui.setvar("fiat", "active_damage_function", [default_index])
    app.gui.setvar("fiat", "damage_curves_standard_info", df)
    select_damage_function()


def select_damage_curve_source(*args):
    df = app.gui.getvar("fiat", "exposure_categories_to_link")
    damage_curves_info = app.gui.getvar("fiat", "damage_curves_standard_info")
    inds = app.gui.getvar("fiat", "active_damage_function")
    active_exposure_category = app.gui.getvar("fiat", "active_exposure_category")[0]

    occtype = "Secondary Object Type"
    if ("Primary Object Type" in df.columns) and (
        "Secondary Object Type" not in df.columns
    ):
        occtype = "Primary Object Type"

    object_type = df[occtype].values[active_exposure_category]
    try:
        selected_damage_function = damage_curves_info.loc[inds]
    except KeyError:
        app.gui.window.dialog_warning(
            "Please first select a damage function",
            "No damage function selected",
        )
    selected_damage_type = selected_damage_function["Damage Type"].iloc[0].lower()

    # Get the linking table and replace it with an updated vulnerability curve
    linking_table = (
        app.active_model.domain.vulnerability_vm.get_damage_curves_linking_file()
    )
    linking_table.loc[
        (linking_table["Exposure Link"] == object_type)
        & (linking_table["Damage Type"] == selected_damage_type),
        ["ID", "Occupancy", "Description", "Source"],
    ] = selected_damage_function[["ID", "Occupancy", "Description", "Source"]].values
    app.active_model.domain.vulnerability_vm.update_linking_table(linking_table)

    df.iloc[
        [active_exposure_category],
        df.columns.get_loc(f"Assigned: {selected_damage_type.capitalize()}"),
    ] = "Yes"
    app.gui.setvar("fiat", "exposure_categories_to_link", df)


def select_damage_function(*args):
    damage_curves_info = app.gui.getvar("fiat", "damage_curves_standard_info")
    inds = app.gui.getvar("fiat", "active_damage_function")
    damage_curves = app.gui.getvar("fiat", "damage_curves_standard_curves")

    rows = damage_curves_info.loc[inds]
    source_name1 = rows.iloc[0]["Source"]
    description1 = rows.iloc[0]["Description"]
    if len(rows) > 2:
        rows = rows.iloc[:2, :]
    df = damage_curves.loc[
        (damage_curves["ID"].isin(rows["ID"]))
        & (damage_curves["Description"].isin(rows["Description"])),
        :,
    ]
    app.gui.setvar("fiat", "selected_damage_curves", df)
    df_plot = df.T.iloc[1:, :]
    df_plot["depth"] = df_plot.index

    fig = go.Figure()
    fig.add_trace(
        go.Scatter(
            x=df_plot["depth"],
            y=df_plot[rows.index[0]],
            mode="lines",
            line_color="black",
            name=source_name1 + "<br>" + description1,
        )
    )
    if len(rows) > 1:
        source_name2 = rows.iloc[1]["Source"]
        description2 = rows.iloc[1]["Description"]
        fig.add_trace(
            go.Scatter(
                x=df_plot["depth"],
                y=df_plot[rows.index[1]],
                mode="lines",
                line_color="red",
                name=source_name2 + "<br>" + description2,
            )
        )

    # Update xaxis properties
    fig.update_xaxes(title_text="Depth (feet)")

    # Update yaxis properties
    fig.update_yaxes(title_text="Damage fraction (-)", range=[-0.1, 1.1])

    fig.update_layout(
        autosize=True,
        height=280,
        width=650,
        margin={"r": 0, "l": 0, "b": 0, "t": 0},
        font={"size": 12, "color": "black", "family": "Arial"},
    )

    # write html to results folder
    html = app.temp_data_path.joinpath("temp_dmg_functions.html")

    fig.write_html(html)
    app.gui.setvar("fiat", "dmg_functions_html_filepath", str(html))

    el = app.gui.popup_window["specify_damage_curves"].find_element_by_id(
        "dmg_functions"
    )
    el.widget.reload()


def reset_specification(*args):
    df = app.gui.getvar("fiat", "exposure_categories_to_link")
    linking_table = (
        app.active_model.domain.vulnerability_vm.get_damage_curves_linking_file()
    )
    app.active_model.domain.vulnerability_vm.update_linking_table(linking_table)
    df["Assigned: Structure"] = ""
    df["Assigned: Content"] = ""
    app.gui.setvar("fiat", "exposure_categories_to_link", df)
