# -*- coding: utf-8 -*-
"""
Created on Mon May 10 12:18:09 2021

@author: ormondt
"""

from pathlib import Path
from delftdashboard.app import app
from delftdashboard.operations import map
import plotly.graph_objects as go


def select(*args):
    # De-activate existing layers
    map.update()


def set_variables(*args):
    app.model["fiat"].set_input_variables()


def filter_damage_curve_table(*args):
    selected_occupancy_type = app.gui.getvar("fiat", "selected_occupancy_type")
    df = app.model["fiat"].get_filtered_damage_function_database(selected_occupancy_type)
    app.gui.setvar("fiat", "damage_curves_standard_info", df)


def select_damage_curve_source(*args):
    print("Select damage curve source")
    df = app.gui.getvar("fiat", "exposure_categories_to_link")


def select_damage_function(*args):
    damage_curves_info = app.gui.getvar("fiat", "damage_curves_standard_info")
    inds = app.gui.getvar("fiat", "active_damage_function")
    damage_curves = app.gui.getvar("fiat", "damage_curves_standard_curves")
    
    # TODO add an identifier to get the right damage functions

    rows = damage_curves_info.loc[inds]
    if len(rows)>2:
        rows = rows.iloc[:2, :]
    df = damage_curves.loc[damage_curves["ID"].isin(rows["ID"]), :]
    app.gui.setvar("fiat", "selected_damage_curves", df)
    df_plot = df.T.iloc[1:, :]
    df_plot["depth"] = df_plot.index
    
    fig = go.Figure()
    fig.add_trace(
            go.Scatter(
                x=df_plot["depth"],
                y=df_plot[rows.index[0]],
                mode="lines",
                line_color="black",
                name="Original Damage Curve",
            )
        )
    if len(rows)>1:
            fig.add_trace(
            go.Scatter(
                x=df_plot["depth"],
                y=df_plot[rows.index[1]],
                mode="lines",
                line_color="red",
                name="New Damage Curve",
            )
        )
    # Update xaxis properties
    # TODO make units configurable
    fig.update_xaxes(title_text="Depth (feet)")
    # Update yaxis properties
    fig.update_yaxes(title_text=f"Damage fraction (-)")

    fig.update_layout(
        autosize=True,
        height=260,
        width=1050,
        margin={"r": 0, "l": 0, "b": 0, "t": 0},
        font={"size": 12, "color": "black", "family": "Arial"},
    )

    # write html to results folder
    html = Path(app.bathymetry_database_path).parent.joinpath("temp_dmg_functions.html")
    fig.write_html(html)
    app.gui.setvar("fiat", "dmg_functions_html_filepath", str(html))
    
    el = app.gui.popup_window["specify_damage_curves"].find_element_by_id("dmg_functions")
    el.widget.reload()
