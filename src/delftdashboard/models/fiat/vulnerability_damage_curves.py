# -*- coding: utf-8 -*-
"""
Created on Mon May 10 12:18:09 2021

@author: ormondt
"""

from delftdashboard.app import app
from delftdashboard.operations import map
import pandas as pd


def select(*args):
    # De-activate existing layers
    map.update()
    if all(values.data is None for key, values in app.map.layer["buildings"].layer.items()):
        app.map.layer["modelmaker_fiat"].layer[app.gui.getvar("modelmaker_fiat", "active_area_of_interest")].show()
    app.gui.setvar("_main", "show_fiat_checkbox", True)

def add_damage_curves(*args):
    # TODO: ensure that the Exposure Link column in the linking file is updated
    # Are the values below always the default values or is the updated file selected?
    selected_damage_curves = app.gui.getvar("fiat", "selected_damage_curve_database")
    selected_link_table = app.gui.getvar("fiat", "selected_damage_curve_linking_table")
    continent =         app.gui.getvar("fiat", "OSM_continent")
    if continent is not None:
        app.active_model.domain.vulnerability_vm.add_vulnerability_curves_to_model(
            selected_damage_curves, selected_link_table,continent, unit = "meters"
        )
    else:
        app.active_model.domain.vulnerability_vm.add_vulnerability_curves_to_model(
            selected_damage_curves, selected_link_table, unit = "feet"
        )
    # TODO: Check if the table on the main vulnerability tab is updated
    # to be the used damage functions

    # Check the checkbox
    app.gui.setvar("_main", "checkbox_vulnerability", True)

    app.gui.window.dialog_info(
        text="The damage functions are added to the model",
        title="Added damage functions",
    )

def update_damage_curves(*args):
    model = "fiat"
    active_model = app.gui.getvar(model, "model_type")

    if active_model == "Start with Open Street Map":
        default_curves = app.data_catalog.get_dataframe("jrc_vulnerability_curves_linking")
        app.gui.setvar(
        "fiat",
        "damage_curves_table",
        default_curves[["Exposure Link", "Damage Type"]],
        )
        app.gui.setvar(
        model, "selected_damage_curve_database", "jrc_vulnerability_curves"
        )
        app.gui.setvar(
        model, "selected_damage_curve_linking_table", "jrc_vulnerability_curves_linking"
        )
        
        continent = app.gui.getvar(model, "OSM_continent")

        damage_functions_database = app.data_catalog.get_dataframe(
            "jrc_vulnerability_curves"
        )
        damage_functions_database_info = damage_functions_database[
            ["continent", "type"]
        ]
        app.damage_function_database = damage_functions_database_info
        default_curves_table = default_curves[
            ["type", "Damage Type"]
        ]
        default_curves_table.rename(columns = {"type": "Occupancy"}, inplace = True)
        default_curves_table.insert(0, "Continent", continent)
        default_curves_table.insert(3,"Description", "European Commission JRC Global flood depth-damage functions database. April 2017")

        default_curves_table.sort_values("Occupancy", inplace=True, ignore_index=True)

        app.gui.setvar(
            model, "damage_curves_standard_info_static", default_curves_table
        )
        app.gui.setvar(
            model, "damage_curves_standard_info", damage_functions_database_info
        )
    elif active_model == "Start with NSI":
        default_curves = app.data_catalog.get_dataframe("default_hazus_iwr_linking")
        app.gui.setvar(
            model,
            "damage_curves_table",
            default_curves[["Exposure Link", "Damage Type", "Source", "Description"]],
        )
        app.gui.setvar(
            model, "selected_damage_curve_database", "default_vulnerability_curves"
        )
        app.gui.setvar(
            model, "selected_damage_curve_linking_table", "default_hazus_iwr_linking"
        )

        damage_functions_database = app.data_catalog.get_dataframe(
            "default_vulnerability_curves"
        )
        damage_functions_database_info = damage_functions_database[
            ["Occupancy", "Source", "Description", "Damage Type", "ID"]
        ]
        app.damage_function_database = damage_functions_database_info
        default_curves_table = default_curves[
            ["Occupancy", "Source", "Description", "Damage Type", "ID"]
        ]
        default_curves_table.sort_values("Occupancy", inplace=True, ignore_index=True)

        app.gui.setvar(
            model, "damage_curves_standard_info_static", default_curves_table
        )
        app.gui.setvar(
            model, "damage_curves_standard_info", damage_functions_database_info
        )

        default_occupancy_df = app.data_catalog.get_dataframe(
            "hazus_iwr_occupancy_classes"
        )
        default_occupancy_df.sort_values(
            "Occupancy Class", inplace=True, ignore_index=True
        )
        default_occupancy_df.fillna("", inplace=True)
        default_occupancy_df_adjusted = default_occupancy_df[default_occupancy_df["Occupancy Class"] != "RES1"]
        app.gui.setvar(model, "hazus_iwr_occupancy_classes", default_occupancy_df)
        app.gui.setvar(model, "hazus_iwr_occupancy_classes_adjusted", default_occupancy_df_adjusted)

        cols = [
            "-9",
            "-8",
            "-7",
            "-6",
            "-5",
            "-4",
            "-3",
            "-2",
            "-1",
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
        ]
        app.gui.setvar(
            model,
            "damage_curves_standard_curves",
            damage_functions_database[["ID", "Description"] + cols],
        )
        app.gui.setvar(model, "selected_damage_curves", pd.DataFrame(columns=cols))

def edit(*args):
    app.active_model.set_model_variables()


def activate_create_curves_panel(*args):
    app.gui.setvar("fiat", "create_curves", True)


def specify_damage_curves(*args):
    app.active_model.damage_curves_specify()
