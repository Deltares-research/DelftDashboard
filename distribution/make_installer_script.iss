; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{27E488B3-8C94-461B-AF67-DA6C4DF40D8E}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={userappdata}\{#MyAppName}
LicenseFile="{#MyAppRootSourceDir}\distribution\LICENSE.txt"
SetupIconFile="{#MyAppRootSourceDir}\distribution\icons\deltares_logo.jpeg"

PrivilegesRequired=lowest
OutputBaseFilename=ModelBuilderInstaller
Compression=lzma
SolidCompression=yes
WizardStyle=modern

DisableWelcomePage=no
DisableDirPage=no
;InfoBeforeFile="{#MyAppRootSourceDir}\README.md"
DisableProgramGroupPage=no

[UninstallDelete]
Type: filesandordirs; Name: "{app}\_internal"
Type: files; Name: "{app}\{#MyAppExeName}"
Type: dirifempty; Name: "{app}"

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "{#MyAppRootSourceDir}\dist\{#MyAppExeName}\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MyAppRootSourceDir}\dist\{#MyAppExeName}\_internal\*"; DestDir: "{app}\_internal"; Excludes: "__pycache__\*,tests\*"; Flags: ignoreversion recursesubdirs createallsubdirs;
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[Code]
var
  InputDirWizardPage: TInputDirWizardPage;
  InputQueryWizardPage: TInputQueryWizardPage;

procedure InitializeWizard;
var
  AfterID: Integer;
begin

  WizardForm.LicenseAcceptedRadio.Checked := False;
  AfterID := wpWelcome;

  InputDirWizardPage := CreateInputDirPage(AfterID,
    'Data selection:',
    'Please select the path to the folder containing bathymetry and watershed data:',
    'IMPORTANT: Choose a location where you DO NOT need administrative rights to edit files!',
    False,
    '');
  InputDirWizardPage.Add('Select the data directory:');
  InputDirWizardPage.Values[0] := ExpandConstant('{userdesktop}');
  AfterID := InputDirWizardPage.ID;
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
  ConfigFileName, ConfigData, temp: String;
begin
  if CurStep = ssPostInstall then
  begin
    ConfigFileName := ExpandConstant('{app}\_internal\delftdashboard\delftdashboard.ini');
    temp := InputDirWizardPage.Values[0];
    StringChangeEx(temp, '\', '/', True);

    ConfigData := 'DATABASE_ROOT=''' + temp + '''' + #13#10 +
                  'DATABASE_NAME=''' + InputQueryWizardPage.Values[0] + '''' + #13#10 +
                  'SYSTEM_FOLDER=''../system''';

    if not ForceDirectories(ExtractFilePath(ConfigFileName)) or
       not SaveStringToFile(ConfigFileName, ConfigData, False) then
    begin
      MsgBox('Failed to save configuration to ' + ConfigFileName + '. Installation cannot proceed.' , mbError, MB_OK);
      Abort;
    end;
  end;
end;
